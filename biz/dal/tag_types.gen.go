// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/yanguiyuan/lxy/biz/model/dbmodel"
)

func newTagType(db *gorm.DB, opts ...gen.DOOption) tagType {
	_tagType := tagType{}

	_tagType.tagTypeDo.UseDB(db, opts...)
	_tagType.tagTypeDo.UseModel(&dbmodel.TagType{})

	tableName := _tagType.tagTypeDo.TableName()
	_tagType.ALL = field.NewAsterisk(tableName)
	_tagType.ID = field.NewInt64(tableName, "id")
	_tagType.Value = field.NewString(tableName, "value")
	_tagType.CreateTime = field.NewTime(tableName, "create_time")

	_tagType.fillFieldMap()

	return _tagType
}

type tagType struct {
	tagTypeDo

	ALL        field.Asterisk
	ID         field.Int64  // ID
	Value      field.String // 标签类型名称
	CreateTime field.Time

	fieldMap map[string]field.Expr
}

func (t tagType) Table(newTableName string) *tagType {
	t.tagTypeDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tagType) As(alias string) *tagType {
	t.tagTypeDo.DO = *(t.tagTypeDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tagType) updateTableName(table string) *tagType {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.Value = field.NewString(table, "value")
	t.CreateTime = field.NewTime(table, "create_time")

	t.fillFieldMap()

	return t
}

func (t *tagType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tagType) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 3)
	t.fieldMap["id"] = t.ID
	t.fieldMap["value"] = t.Value
	t.fieldMap["create_time"] = t.CreateTime
}

func (t tagType) clone(db *gorm.DB) tagType {
	t.tagTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tagType) replaceDB(db *gorm.DB) tagType {
	t.tagTypeDo.ReplaceDB(db)
	return t
}

type tagTypeDo struct{ gen.DO }

type ITagTypeDo interface {
	gen.SubQuery
	Debug() ITagTypeDo
	WithContext(ctx context.Context) ITagTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITagTypeDo
	WriteDB() ITagTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITagTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITagTypeDo
	Not(conds ...gen.Condition) ITagTypeDo
	Or(conds ...gen.Condition) ITagTypeDo
	Select(conds ...field.Expr) ITagTypeDo
	Where(conds ...gen.Condition) ITagTypeDo
	Order(conds ...field.Expr) ITagTypeDo
	Distinct(cols ...field.Expr) ITagTypeDo
	Omit(cols ...field.Expr) ITagTypeDo
	Join(table schema.Tabler, on ...field.Expr) ITagTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITagTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITagTypeDo
	Group(cols ...field.Expr) ITagTypeDo
	Having(conds ...gen.Condition) ITagTypeDo
	Limit(limit int) ITagTypeDo
	Offset(offset int) ITagTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITagTypeDo
	Unscoped() ITagTypeDo
	Create(values ...*dbmodel.TagType) error
	CreateInBatches(values []*dbmodel.TagType, batchSize int) error
	Save(values ...*dbmodel.TagType) error
	First() (*dbmodel.TagType, error)
	Take() (*dbmodel.TagType, error)
	Last() (*dbmodel.TagType, error)
	Find() ([]*dbmodel.TagType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbmodel.TagType, err error)
	FindInBatches(result *[]*dbmodel.TagType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*dbmodel.TagType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITagTypeDo
	Assign(attrs ...field.AssignExpr) ITagTypeDo
	Joins(fields ...field.RelationField) ITagTypeDo
	Preload(fields ...field.RelationField) ITagTypeDo
	FirstOrInit() (*dbmodel.TagType, error)
	FirstOrCreate() (*dbmodel.TagType, error)
	FindByPage(offset int, limit int) (result []*dbmodel.TagType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITagTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tagTypeDo) Debug() ITagTypeDo {
	return t.withDO(t.DO.Debug())
}

func (t tagTypeDo) WithContext(ctx context.Context) ITagTypeDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tagTypeDo) ReadDB() ITagTypeDo {
	return t.Clauses(dbresolver.Read)
}

func (t tagTypeDo) WriteDB() ITagTypeDo {
	return t.Clauses(dbresolver.Write)
}

func (t tagTypeDo) Session(config *gorm.Session) ITagTypeDo {
	return t.withDO(t.DO.Session(config))
}

func (t tagTypeDo) Clauses(conds ...clause.Expression) ITagTypeDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tagTypeDo) Returning(value interface{}, columns ...string) ITagTypeDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tagTypeDo) Not(conds ...gen.Condition) ITagTypeDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tagTypeDo) Or(conds ...gen.Condition) ITagTypeDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tagTypeDo) Select(conds ...field.Expr) ITagTypeDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tagTypeDo) Where(conds ...gen.Condition) ITagTypeDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tagTypeDo) Order(conds ...field.Expr) ITagTypeDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tagTypeDo) Distinct(cols ...field.Expr) ITagTypeDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tagTypeDo) Omit(cols ...field.Expr) ITagTypeDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tagTypeDo) Join(table schema.Tabler, on ...field.Expr) ITagTypeDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tagTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITagTypeDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tagTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) ITagTypeDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tagTypeDo) Group(cols ...field.Expr) ITagTypeDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tagTypeDo) Having(conds ...gen.Condition) ITagTypeDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tagTypeDo) Limit(limit int) ITagTypeDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tagTypeDo) Offset(offset int) ITagTypeDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tagTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITagTypeDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tagTypeDo) Unscoped() ITagTypeDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tagTypeDo) Create(values ...*dbmodel.TagType) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tagTypeDo) CreateInBatches(values []*dbmodel.TagType, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tagTypeDo) Save(values ...*dbmodel.TagType) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tagTypeDo) First() (*dbmodel.TagType, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.TagType), nil
	}
}

func (t tagTypeDo) Take() (*dbmodel.TagType, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.TagType), nil
	}
}

func (t tagTypeDo) Last() (*dbmodel.TagType, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.TagType), nil
	}
}

func (t tagTypeDo) Find() ([]*dbmodel.TagType, error) {
	result, err := t.DO.Find()
	return result.([]*dbmodel.TagType), err
}

func (t tagTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbmodel.TagType, err error) {
	buf := make([]*dbmodel.TagType, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tagTypeDo) FindInBatches(result *[]*dbmodel.TagType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tagTypeDo) Attrs(attrs ...field.AssignExpr) ITagTypeDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tagTypeDo) Assign(attrs ...field.AssignExpr) ITagTypeDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tagTypeDo) Joins(fields ...field.RelationField) ITagTypeDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tagTypeDo) Preload(fields ...field.RelationField) ITagTypeDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tagTypeDo) FirstOrInit() (*dbmodel.TagType, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.TagType), nil
	}
}

func (t tagTypeDo) FirstOrCreate() (*dbmodel.TagType, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.TagType), nil
	}
}

func (t tagTypeDo) FindByPage(offset int, limit int) (result []*dbmodel.TagType, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tagTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tagTypeDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tagTypeDo) Delete(models ...*dbmodel.TagType) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tagTypeDo) withDO(do gen.Dao) *tagTypeDo {
	t.DO = *do.(*gen.DO)
	return t
}
