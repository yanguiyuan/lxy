// Code generated by hertz generator.

package lxyhttp

import (
	"context"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/yanguiyuan/lxy/biz/dal"
	"github.com/yanguiyuan/lxy/biz/model/dbmodel"
	"github.com/yanguiyuan/lxy/biz/pack"
	"github.com/yanguiyuan/yuan/pkg/gen/id"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	lxyhttp "github.com/yanguiyuan/lxy/biz/model/lxyhttp"
)

func HttpTags(tags []*dbmodel.Tag) []*lxyhttp.Tag {
	var list []*lxyhttp.Tag
	for _, tag := range tags {
		list = append(list, &lxyhttp.Tag{
			ID:        tag.ID,
			Value:     tag.Value,
			TagTypeID: tag.TagTypeID,
		})
	}
	return list
}
func DBWordConvertHttp(words []*dbmodel.Word) []*lxyhttp.Buzzword {
	var result []*lxyhttp.Buzzword
	for _, word := range words {
		var tags []*lxyhttp.Tag
		for _, t := range word.Tags {
			tags = append(tags, &lxyhttp.Tag{
				ID:        t.ID,
				Value:     t.Value,
				TagTypeID: t.TagTypeID,
			})
		}
		result = append(result, &lxyhttp.Buzzword{
			ID:         word.ID,
			Word:       word.Value,
			Paraphrase: word.Paraphrase,
			Tags:       tags,
		})
	}
	return result
}

// QueryAllBuzzwords .
// @router /buzzwords [GET]
func QueryAllBuzzwords(ctx context.Context, c *app.RequestContext) {
	var err error
	data := []*lxyhttp.Buzzword{}
	result, err := dal.Word.WithContext(ctx).Find()
	if err != nil {
		hlog.Info(err)
		c.JSON(consts.StatusInternalServerError, err)
		return
	}
	data = DBWordConvertHttp(result)
	if err != nil {
		hlog.Info(err)
		c.JSON(consts.StatusInternalServerError, err)
		return
	}
	resp := new(lxyhttp.QueryBuzzwordsResponse)
	resp.Code = consts.StatusOK
	resp.Messgage = "查询成功"
	resp.Data = data
	c.JSON(consts.StatusOK, resp)
}

// AddBuzzword .
// @router /buzzword [POST]
func AddBuzzword(ctx context.Context, c *app.RequestContext) {
	var err error
	var req lxyhttp.AddBuzzwordRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := new(lxyhttp.CommonResponse)
	//var tags []dbmodel.Tag
	//for _, tagId := range req.TagIds {
	//	tags = append(tags, dbmodel.Tag{ID: tagId})
	//}
	if err = dal.Word.WithContext(ctx).Create(&dbmodel.Word{
		ID:         int64(id.One()),
		Value:      req.Word,
		Paraphrase: req.Paraphrase,
		Tags:       pack.FromTagList(req.Tags),
	}); err != nil {
		resp.Code = consts.StatusInternalServerError
		resp.Message = "执行SQL失败"
		hlog.Error(err)
		c.JSON(int(resp.Code), resp)
		return
	}
	resp.Code = consts.StatusOK
	resp.Message = "添加成功"
	c.JSON(consts.StatusOK, resp)
}

// RemoveBuzzword .
// @router /buzzword/:id [DELETE]
func RemoveBuzzword(ctx context.Context, c *app.RequestContext) {
	var err error
	var req lxyhttp.RemoveBuzzwordRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	_, err = dal.Word.WithContext(ctx).Where(dal.Word.ID.Eq(req.BuzzwordID)).Delete()
	if err != nil {
		hlog.Error(err)
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(lxyhttp.CommonResponse)
	resp.Code = 200
	resp.Message = "删除成功"
	c.JSON(consts.StatusOK, resp)
}

// UpdateBuzzwordParaphrase .
// @router /buzzword/paraphrase [PUT]
func UpdateBuzzwordParaphrase(ctx context.Context, c *app.RequestContext) {
	var err error
	var req lxyhttp.UpdateBuzzwordParaphraseRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	_, err = dal.Word.WithContext(ctx).Where(dal.Word.ID.Eq(req.BuzzwordID)).Update(dal.Word.Paraphrase, req.Value)
	if err != nil {
		hlog.Error(err)
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := new(lxyhttp.CommonResponse)
	resp.Code = 200
	resp.Message = "更新成功"
	c.JSON(consts.StatusOK, resp)
}

// AddTag .
// @router /tag [POST]
func AddTag(ctx context.Context, c *app.RequestContext) {
	var err error
	var req lxyhttp.AddTagRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	err = dal.Tag.WithContext(ctx).Create(&dbmodel.Tag{
		ID:        int64(id.One()),
		TagTypeID: req.TagTypeID,
		Value:     req.Value,
	})
	if err != nil {
		hlog.Error(err)
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}
	resp := new(lxyhttp.CommonResponse)
	resp.Code = 200
	resp.Message = "添加成功"
	c.JSON(consts.StatusOK, resp)
}

// AddTagType .
// @router /tag/type [POST]
func AddTagType(ctx context.Context, c *app.RequestContext) {
	var err error
	var req lxyhttp.AddTagTypeRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	err = dal.TagType.WithContext(ctx).Create(&dbmodel.TagType{
		ID:    int64(id.One()),
		Value: req.Value,
	})
	if err != nil {
		pack.SqlAddFailed(c, err)
		return
	}
	resp := new(lxyhttp.CommonResponse)
	pack.AddOk(resp)
	c.JSON(consts.StatusOK, resp)
}

// AddBuzzwordTag .
// @router /buzzword/tag [POST]
func AddBuzzwordTag(ctx context.Context, c *app.RequestContext) {
	var err error
	var req lxyhttp.AddOrRemoveBuzzwordTagRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := new(lxyhttp.CommonResponse)
	err = dal.WordTag.WithContext(ctx).Create(&dbmodel.WordTag{
		TagID:  req.TagID,
		WordID: req.BuzzwordID,
	})
	if err != nil {
		pack.SqlAddFailed(c, err)
		return
	}
	pack.AddOk(resp)
	c.JSON(consts.StatusOK, resp)
}

// RemoveBuzzwordTag .
// @router /buzzword/tag [DELETE]
func RemoveBuzzwordTag(ctx context.Context, c *app.RequestContext) {
	var err error
	var req lxyhttp.AddOrRemoveBuzzwordTagRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	info, err := dal.WordTag.WithContext(ctx).Delete(&dbmodel.WordTag{
		TagID:  req.TagID,
		WordID: req.BuzzwordID,
	})
	if err != nil {
		pack.SqlDeleteFailed(c, err, info)
		return
	}
	resp := new(lxyhttp.CommonResponse)
	pack.DeleteOk(resp)
	c.JSON(consts.StatusOK, resp)
}

// RemoveTag .
// @router /tag/:id [DELETE]
func RemoveTag(ctx context.Context, c *app.RequestContext) {
	var err error
	var req lxyhttp.OneIDRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(lxyhttp.CommonResponse)
	info, err := dal.Tag.WithContext(ctx).Where(dal.Word.ID.Eq(req.ID)).Delete()
	if err != nil {
		pack.SqlDeleteFailed(c, err, info)
		return
	}
	pack.DeleteOk(resp)
	c.JSON(consts.StatusOK, resp)
}

// RemoveTagType .
// @router /tag/type/:id [DELETE]
func RemoveTagType(ctx context.Context, c *app.RequestContext) {
	var err error
	var req lxyhttp.OneIDRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(lxyhttp.CommonResponse)
	info, err := dal.TagType.WithContext(ctx).Where(dal.TagType.ID.Eq(req.ID)).Delete()
	if err != nil {
		pack.SqlDeleteFailed(c, err, info)
		return
	}
	pack.DeleteOk(resp)
	c.JSON(consts.StatusOK, resp)
}

// UpdateTagOfType .
// @router /tag/:id_one/type/:id_two [PUT]
func UpdateTagOfType(ctx context.Context, c *app.RequestContext) {
	var err error
	var req lxyhttp.TwoIDRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(lxyhttp.CommonResponse)
	update, err := dal.Tag.WithContext(ctx).Where(dal.Tag.ID.Eq(req.IDOne)).Update(dal.Tag.TagTypeID, req.IDTwo)
	if err != nil {
		pack.SqlUpdateFailed(c, err, update)
		return
	}
	pack.UpdateOk(resp)
	c.JSON(consts.StatusOK, resp)
}

// ExportExcel .
// @router /excel [PATCH]
func ExportExcel(ctx context.Context, c *app.RequestContext) {
	var err error
	var req lxyhttp.ExportExcelRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(lxyhttp.ExportExcelResponse)

	c.JSON(consts.StatusOK, resp)
}

// ImportExcel .
// @router /excel [POST]
func ImportExcel(ctx context.Context, c *app.RequestContext) {
	var err error
	var req lxyhttp.ImportExcelRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := new(lxyhttp.CommonResponse)

	c.JSON(consts.StatusOK, resp)
}

// QueryBuzzwordsByTag .
// @router /buzzwords/tag/:id [GET]
func QueryBuzzwordsByTag(ctx context.Context, c *app.RequestContext) {
	var err error
	var req lxyhttp.OneIDRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(lxyhttp.QueryBuzzwordsResponse)
	err = dal.Q.Transaction(func(tx *dal.Query) error {
		wordTags, err := tx.WordTag.WithContext(ctx).Where(tx.WordTag.TagID.Eq(req.ID)).Find()
		if err != nil {
			return err
		}
		ids := make([]int64, 0, len(wordTags))
		for _, wordTag := range wordTags {
			ids = append(ids, wordTag.WordID)
		}
		words, err := tx.Word.WithContext(ctx).Where(tx.Word.ID.In(ids...)).Find()
		if err != nil {
			return err
		}
		resp.Data = pack.ToWordList(words)
		return nil
	})
	if err != nil {
		pack.SqlQueryFailed(c, err)
		return
	}
	resp.Code = consts.StatusOK
	resp.Messgage = "查询成功"
	c.JSON(consts.StatusOK, resp)
}

// QueryBuzzwordsByKeyword .
// @router /buzzwords/keyword [GET]
func QueryBuzzwordsByKeyword(ctx context.Context, c *app.RequestContext) {
	var err error
	var req lxyhttp.KeywordQueryRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(lxyhttp.QueryBuzzwordsResponse)
	words, err := dal.Word.WithContext(ctx).Where(dal.Word.Value.Like(req.Keyword)).Find()
	if err != nil {
		pack.SqlQueryFailed(c, err)
		return
	}
	resp.Code = consts.StatusOK
	resp.Data = pack.ToWordList(words)
	c.JSON(consts.StatusOK, resp)
}

// QueryAllTags .
// @router /tags [GET]
func QueryAllTags(ctx context.Context, c *app.RequestContext) {
	//var err error

	resp := new(lxyhttp.QueryTagsResponse)
	find, err := dal.Tag.WithContext(ctx).Find()
	if err != nil {
		pack.SqlQueryFailed(c, err)
		return
	}
	resp.Code = consts.StatusOK
	resp.Data = pack.ToTagList(find)
	resp.Message = "查询成功"
	c.JSON(consts.StatusOK, resp)
}

// QueryAllTagTypes .
// @router /tag/types [GET]
func QueryAllTagTypes(ctx context.Context, c *app.RequestContext) {
	//var err error

	resp := new(lxyhttp.QueryTagTypesResponse)
	find, err := dal.TagType.WithContext(ctx).Find()
	if err != nil {
		pack.SqlQueryFailed(c, err)
		return
	}
	resp.Code = consts.StatusOK
	resp.Data = pack.ToTagTypeList(find)
	resp.Message = "查询成功"
	c.JSON(consts.StatusOK, resp)
}

// QueryTagsByType .
// @router /tags/:id [GET]
func QueryTagsByType(ctx context.Context, c *app.RequestContext) {
	var err error
	var req lxyhttp.OneIDRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(lxyhttp.QueryTagsResponse)
	find, err := dal.Tag.WithContext(ctx).Where(dal.Tag.TagTypeID.Eq(req.ID)).Find()
	if err != nil {
		pack.SqlQueryFailed(c, err)
		return
	}
	resp.Code = consts.StatusOK
	resp.Data = pack.ToTagList(find)
	resp.Message = "查询成功"
	c.JSON(consts.StatusOK, resp)
}

// QueryTagsBykeyword .
// @router /tags/keyword [GET]
func QueryTagsBykeyword(ctx context.Context, c *app.RequestContext) {
	var err error
	var req lxyhttp.KeywordQueryRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(lxyhttp.QueryTagsResponse)
	find, err := dal.Tag.WithContext(ctx).Where(dal.Tag.Value.Like(req.Keyword)).Find()
	if err != nil {
		pack.SqlQueryFailed(c, err)
		return
	}
	resp.Code = consts.StatusOK
	resp.Data = pack.ToTagList(find)
	resp.Message = "查询成功"
	c.JSON(consts.StatusOK, resp)
}

// UpdateBaiduHot .
// @router /baiduhot [PATCH]
func UpdateBaiduHot(ctx context.Context, c *app.RequestContext) {
	//var err error

	resp := new(lxyhttp.CommonResponse)

	c.JSON(consts.StatusOK, resp)
}
